// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLatestParams creates a new GetLatestParams object
// with the default values initialized.
func NewGetLatestParams() *GetLatestParams {
	var ()
	return &GetLatestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLatestParamsWithTimeout creates a new GetLatestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLatestParamsWithTimeout(timeout time.Duration) *GetLatestParams {
	var ()
	return &GetLatestParams{

		timeout: timeout,
	}
}

// NewGetLatestParamsWithContext creates a new GetLatestParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLatestParamsWithContext(ctx context.Context) *GetLatestParams {
	var ()
	return &GetLatestParams{

		Context: ctx,
	}
}

// NewGetLatestParamsWithHTTPClient creates a new GetLatestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLatestParamsWithHTTPClient(client *http.Client) *GetLatestParams {
	var ()
	return &GetLatestParams{
		HTTPClient: client,
	}
}

/*GetLatestParams contains all the parameters to send to the API endpoint
for the get latest operation typically these are written to a http.Request
*/
type GetLatestParams struct {

	/*Base
	  Currency code ex: EUR

	*/
	Base *string
	/*Symbols*/
	Symbols []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get latest params
func (o *GetLatestParams) WithTimeout(timeout time.Duration) *GetLatestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get latest params
func (o *GetLatestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get latest params
func (o *GetLatestParams) WithContext(ctx context.Context) *GetLatestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get latest params
func (o *GetLatestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get latest params
func (o *GetLatestParams) WithHTTPClient(client *http.Client) *GetLatestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get latest params
func (o *GetLatestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBase adds the base to the get latest params
func (o *GetLatestParams) WithBase(base *string) *GetLatestParams {
	o.SetBase(base)
	return o
}

// SetBase adds the base to the get latest params
func (o *GetLatestParams) SetBase(base *string) {
	o.Base = base
}

// WithSymbols adds the symbols to the get latest params
func (o *GetLatestParams) WithSymbols(symbols []string) *GetLatestParams {
	o.SetSymbols(symbols)
	return o
}

// SetSymbols adds the symbols to the get latest params
func (o *GetLatestParams) SetSymbols(symbols []string) {
	o.Symbols = symbols
}

// WriteToRequest writes these params to a swagger request
func (o *GetLatestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Base != nil {

		// query param base
		var qrBase string
		if o.Base != nil {
			qrBase = *o.Base
		}
		qBase := qrBase
		if qBase != "" {
			if err := r.SetQueryParam("base", qBase); err != nil {
				return err
			}
		}

	}

	valuesSymbols := o.Symbols

	joinedSymbols := swag.JoinByFormat(valuesSymbols, "")
	// query array param symbols
	if err := r.SetQueryParam("symbols", joinedSymbols...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
